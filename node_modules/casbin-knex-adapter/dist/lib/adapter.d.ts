import type Knex from 'knex';
import type { Adapter, BatchAdapter, Model } from 'casbin';
declare type CasbinColumn = 'v0' | 'v1' | 'v2' | 'v3' | 'v4' | 'v5';
export declare type DeleteWhereParam = {
    [key in CasbinColumn]?: string;
};
export declare type KnexAdapterOptions = {
    tableName?: string;
    chunkSize?: number;
    concurrentDeletes?: number;
};
export declare class KnexAdapter implements Adapter, BatchAdapter {
    private readonly knex;
    private readonly tableName;
    private readonly chunkSize;
    private readonly concurrentDeletes;
    constructor(knex: Knex, options?: KnexAdapterOptions);
    static newAdapter(knex: Knex, options?: KnexAdapterOptions): Promise<KnexAdapter>;
    private get policiesTable();
    createTable(): Promise<void>;
    dropTable(): Promise<void>;
    close(): Promise<void>;
    loadPolicy(model: Model): Promise<void>;
    savePolicy(model: Model): Promise<boolean>;
    addPolicy(sec: string, ptype: string, rule: string[]): Promise<void>;
    addPolicies(sec: string, ptype: string, rules: string[][]): Promise<void>;
    removePolicy(sec: string, ptype: string, rule: string[]): Promise<void>;
    removePoliciesWhere(whereParam: DeleteWhereParam): Promise<void>;
    removePolicies(sec: string, ptype: string, rules: string[][]): Promise<void>;
    removeFilteredPolicy(sec: string, ptype: string, fieldIndex: number, ...fieldValues: string[]): Promise<void>;
}
export {};
